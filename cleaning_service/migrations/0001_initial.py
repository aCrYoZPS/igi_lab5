# Generated by Django 5.2 on 2025-04-27 18:43

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('discount_type', models.CharField(choices=[('PERCENT', 'Percentage'), ('FIXED', 'Fixed Amount')], max_length=10)),
                ('value', models.DecimalField(decimal_places=2, help_text='Amount or percentage value', max_digits=10)),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('max_uses', models.PositiveIntegerField(blank=True, help_text='Maximum number of times this code can be used overall', null=True)),
                ('used_count', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Customer name or Company name', max_length=200)),
                ('contact_person', models.CharField(blank=True, help_text='Contact person if company', max_length=150, null=True)),
                ('contact_number', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('client_type', models.CharField(choices=[('PRIVATE', 'Private Individual'), ('COMPANY', 'Company')], default='PRIVATE', max_length=10)),
                ('address', models.TextField(blank=True, help_text='Primary address (optional)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, help_text='Link to Django User for login (optional for initial entry)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(help_text='Detailed description of what the service includes.')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, help_text='Additional notes for internal use or price list.', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this service currently offered?')),
                ('service_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='services', to='cleaning_service.servicetype')),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_number', models.CharField(blank=True, max_length=20, null=True)),
                ('hire_date', models.DateField()),
                ('role', models.CharField(blank=True, help_text='e.g., Cleaner, Manager, Receptionist', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(help_text='Link to Django User for login', on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_code', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the order', unique=True)),
                ('address', models.TextField(help_text='Address where cleaning work will be performed')),
                ('work_date', models.DateTimeField(help_text='Scheduled date and time for the cleaning work')),
                ('status', models.CharField(choices=[('PENDING', 'Pending Confirmation'), ('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('payment_status', models.CharField(choices=[('UNPAID', 'Unpaid'), ('PAID', 'Paid')], default='UNPAID', max_length=10)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Calculated total cost of the order', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='cleaning_service.client')),
                ('promo_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='cleaning_service.promocode')),
                ('assigned_staff', models.ManyToManyField(blank=True, help_text='Staff members assigned to this job', related_name='assigned_orders', to='cleaning_service.staff')),
                ('created_by', models.ForeignKey(blank=True, help_text='Staff member who entered the order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_orders', to='cleaning_service.staff')),
            ],
        ),
        migrations.CreateModel(
            name='StaffSpecialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cleaning_service.service')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cleaning_service.staff')),
            ],
            options={
                'unique_together': {('staff', 'service')},
            },
        ),
        migrations.AddField(
            model_name='staff',
            name='specializations',
            field=models.ManyToManyField(related_name='specialized_staff', through='cleaning_service.StaffSpecialization', to='cleaning_service.service'),
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('price_at_order', models.DecimalField(decimal_places=2, help_text='Price of the service unit when the order was placed', max_digits=10)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='cleaning_service.order')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cleaning_service.service')),
            ],
            options={
                'unique_together': {('order', 'service')},
            },
        ),
    ]
